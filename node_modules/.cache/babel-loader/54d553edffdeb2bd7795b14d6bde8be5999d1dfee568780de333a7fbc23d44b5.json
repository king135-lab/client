{"ast":null,"code":"const Game = require('../components/Game'); // Import the Game model\n\n// Function to calculate n (correct digit in correct position) and p (correct digit in wrong position)\nconst calculateNandP = (secretNumber, guess) => {\n  let n = 0,\n    p = 0;\n  let secretArr = secretNumber.split('');\n  let guessArr = guess.split('');\n  secretArr.forEach((digit, index) => {\n    if (digit === guessArr[index]) {\n      n++;\n    } else if (guessArr.includes(digit)) {\n      p++;\n    }\n  });\n  return {\n    n,\n    p\n  };\n};\n\n// Function to generate a random game ID\nconst generateGameId = () => {\n  return Math.random().toString(36).substring(2, 8); // Simple random string of 6 characters\n};\n\n// Start a new game\nconst startGame = async (req, res) => {\n  try {\n    const {\n      players\n    } = req.body;\n    if (!players || players.length < 1) {\n      return res.status(400).json({\n        message: 'At least one player is required'\n      });\n    }\n    const gameId = generateGameId();\n    const newGame = new Game({\n      gameId,\n      players,\n      status: 'waiting',\n      // Game is in waiting status until both players join\n      guesses: [],\n      player1Joined: true,\n      // Game starter automatically joins\n      player2Joined: false,\n      secretNumber1: null,\n      secretNumber2: null\n    });\n    await newGame.save();\n    res.status(201).json({\n      gameId: newGame.gameId,\n      message: 'Game started!'\n    });\n  } catch (err) {\n    console.error('Error starting the game:', err);\n    res.status(500).json({\n      message: 'Error starting the game'\n    });\n  }\n};\n\n// Validate that the secret number is a 4-digit number with unique digits\nconst isValidSecretNumber = number => {\n  const numberString = number.toString();\n  if (numberString.length !== 4) return false;\n  const uniqueDigits = new Set(numberString);\n  return uniqueDigits.size === numberString.length;\n};\n\n// Set the secret number for a player\nconst setSecretNumber = async (req, res) => {\n  try {\n    const {\n      gameId,\n      player,\n      secretNumber\n    } = req.body;\n\n    // Validate the secret number (4 unique digits)\n    if (!isValidSecretNumber(secretNumber)) {\n      return res.status(400).json({\n        message: 'Invalid secret number! Digits must not repeat.'\n      });\n    }\n    const game = await Game.findOne({\n      gameId\n    });\n    if (!game) {\n      return res.status(404).json({\n        message: 'Game not found'\n      });\n    }\n\n    // Ensure both players are present before setting secret numbers\n    if (!game.player1Joined || !game.player2Joined) {\n      return res.status(400).json({\n        message: 'Both players must join before setting secret numbers.'\n      });\n    }\n\n    // Handle secret number setup for both players\n    if (game.players[0] === player && !game.secretNumber1) {\n      // First player sets their secret number\n      game.secretNumber1 = secretNumber;\n      game.status = 'player2SetSecret'; // Move to the phase where player 2 should set their secret\n    } else if (game.players[1] === player && !game.secretNumber2) {\n      // Second player sets their secret number\n      game.secretNumber2 = secretNumber;\n      game.status = 'gameStarted'; // Both secret numbers are set, game starts\n    } else if (game.players[0] === player && game.secretNumber1) {\n      return res.status(400).json({\n        message: 'Secret number already set for player 1'\n      });\n    } else if (game.players[1] === player && game.secretNumber2) {\n      return res.status(400).json({\n        message: 'Secret number already set for player 2'\n      });\n    } else {\n      return res.status(400).json({\n        message: 'Player is not part of this game'\n      });\n    }\n    await game.save();\n    res.status(200).json({\n      message: 'Secret number set successfully!'\n    });\n  } catch (err) {\n    console.error('Error setting secret number:', err);\n    res.status(500).json({\n      message: 'Error setting secret number'\n    });\n  }\n};\n\n// Submit a guess and calculate n and p\nconst submitGuess = async (req, res) => {\n  try {\n    const {\n      gameId,\n      player,\n      guess\n    } = req.body;\n    const game = await Game.findOne({\n      gameId\n    });\n    if (!game) {\n      return res.status(404).json({\n        message: 'Game not found'\n      });\n    }\n    const currentPlayerTurn = game.status === 'player1Turn' ? game.players[0] : game.players[1];\n    if (player !== currentPlayerTurn) {\n      return res.status(400).json({\n        message: `It's not ${player}'s turn!`\n      });\n    }\n    const {\n      n,\n      p\n    } = calculateNandP(game.players[0] === player ? game.secretNumber1 : game.secretNumber2, guess);\n    game.guesses.push({\n      player,\n      guess,\n      n,\n      p\n    });\n\n    // Alternate player turn after each guess\n    game.status = currentPlayerTurn === game.players[0] ? 'player2Turn' : 'player1Turn';\n    await game.save();\n    res.status(200).json({\n      message: 'Guess submitted successfully!',\n      n,\n      p\n    });\n  } catch (err) {\n    console.error('Error submitting guess:', err);\n    res.status(500).json({\n      message: 'Error submitting guess'\n    });\n  }\n};\n\n// Fetch game data\nconst getGameData = async (req, res) => {\n  try {\n    const {\n      gameId\n    } = req.params;\n    const game = await Game.findOne({\n      gameId\n    });\n    if (!game) {\n      return res.status(404).json({\n        message: 'Game not found'\n      });\n    }\n    res.json(game);\n  } catch (err) {\n    console.error('Error fetching game data:', err);\n    res.status(500).json({\n      message: 'Error fetching game data'\n    });\n  }\n};\n\n// Handle second player joining the game\nconst joinGame = async (req, res) => {\n  try {\n    const {\n      gameId,\n      player\n    } = req.body;\n    const game = await Game.findOne({\n      gameId\n    });\n    if (!game) {\n      return res.status(404).json({\n        message: 'Game not found'\n      });\n    }\n    if (game.player2Joined) {\n      return res.status(400).json({\n        message: 'Game already has two players'\n      });\n    }\n\n    // Set player2Joined to true for the second player\n    game.player2Joined = true;\n\n    // If player2 joins, set the game status to 'setSecret' for player1\n    game.status = 'setSecret';\n    await game.save();\n    res.status(200).json({\n      message: 'Player joined the game!'\n    });\n  } catch (err) {\n    console.error('Error joining the game:', err);\n    res.status(500).json({\n      message: 'Error joining the game'\n    });\n  }\n};\n\n// Update game data (added as a new feature to handle game state updates)\nconst updateGame = async (gameId, updatedData) => {\n  try {\n    const game = await Game.findOne({\n      gameId\n    });\n    if (!game) {\n      throw new Error('Game not found');\n    }\n    Object.assign(game, updatedData);\n    await game.save();\n    return game;\n  } catch (err) {\n    throw new Error('Error updating the game');\n  }\n};\nmodule.exports = {\n  startGame,\n  submitGuess,\n  setSecretNumber,\n  getGameData,\n  joinGame,\n  updateGame,\n  calculateNandP\n};","map":{"version":3,"names":["Game","require","calculateNandP","secretNumber","guess","n","p","secretArr","split","guessArr","forEach","digit","index","includes","generateGameId","Math","random","toString","substring","startGame","req","res","players","body","length","status","json","message","gameId","newGame","guesses","player1Joined","player2Joined","secretNumber1","secretNumber2","save","err","console","error","isValidSecretNumber","number","numberString","uniqueDigits","Set","size","setSecretNumber","player","game","findOne","submitGuess","currentPlayerTurn","push","getGameData","params","joinGame","updateGame","updatedData","Error","Object","assign","module","exports"],"sources":["C:/Users/ademm/Documents/Projects/number-position-game/client/src/components/CreateGame.js"],"sourcesContent":["const Game = require('../components/Game'); // Import the Game model\r\n\r\n// Function to calculate n (correct digit in correct position) and p (correct digit in wrong position)\r\nconst calculateNandP = (secretNumber, guess) => {\r\n    let n = 0, p = 0;\r\n    let secretArr = secretNumber.split('');\r\n    let guessArr = guess.split('');\r\n\r\n    secretArr.forEach((digit, index) => {\r\n        if (digit === guessArr[index]) {\r\n            n++;\r\n        } else if (guessArr.includes(digit)) {\r\n            p++;\r\n        }\r\n    });\r\n\r\n    return { n, p };\r\n};\r\n\r\n// Function to generate a random game ID\r\nconst generateGameId = () => {\r\n    return Math.random().toString(36).substring(2, 8); // Simple random string of 6 characters\r\n};\r\n\r\n// Start a new game\r\nconst startGame = async (req, res) => {\r\n    try {\r\n        const { players } = req.body;\r\n        if (!players || players.length < 1) {\r\n            return res.status(400).json({ message: 'At least one player is required' });\r\n        }\r\n        const gameId = generateGameId();\r\n        const newGame = new Game({\r\n            gameId,\r\n            players,\r\n            status: 'waiting', // Game is in waiting status until both players join\r\n            guesses: [],\r\n            player1Joined: true, // Game starter automatically joins\r\n            player2Joined: false,\r\n            secretNumber1: null,\r\n            secretNumber2: null,\r\n        });\r\n        await newGame.save();\r\n        res.status(201).json({ gameId: newGame.gameId, message: 'Game started!' });\r\n    } catch (err) {\r\n        console.error('Error starting the game:', err);\r\n        res.status(500).json({ message: 'Error starting the game' });\r\n    }\r\n};\r\n\r\n// Validate that the secret number is a 4-digit number with unique digits\r\nconst isValidSecretNumber = (number) => {\r\n    const numberString = number.toString();\r\n    if (numberString.length !== 4) return false;\r\n    const uniqueDigits = new Set(numberString);\r\n    return uniqueDigits.size === numberString.length;\r\n};\r\n\r\n// Set the secret number for a player\r\nconst setSecretNumber = async (req, res) => {\r\n    try {\r\n        const { gameId, player, secretNumber } = req.body;\r\n\r\n        // Validate the secret number (4 unique digits)\r\n        if (!isValidSecretNumber(secretNumber)) {\r\n            return res.status(400).json({ message: 'Invalid secret number! Digits must not repeat.' });\r\n        }\r\n\r\n        const game = await Game.findOne({ gameId });\r\n        if (!game) {\r\n            return res.status(404).json({ message: 'Game not found' });\r\n        }\r\n\r\n        // Ensure both players are present before setting secret numbers\r\n        if (!game.player1Joined || !game.player2Joined) {\r\n            return res.status(400).json({ message: 'Both players must join before setting secret numbers.' });\r\n        }\r\n\r\n        // Handle secret number setup for both players\r\n        if (game.players[0] === player && !game.secretNumber1) {\r\n            // First player sets their secret number\r\n            game.secretNumber1 = secretNumber;\r\n            game.status = 'player2SetSecret';  // Move to the phase where player 2 should set their secret\r\n        } else if (game.players[1] === player && !game.secretNumber2) {\r\n            // Second player sets their secret number\r\n            game.secretNumber2 = secretNumber;\r\n            game.status = 'gameStarted';  // Both secret numbers are set, game starts\r\n        } else if (game.players[0] === player && game.secretNumber1) {\r\n            return res.status(400).json({ message: 'Secret number already set for player 1' });\r\n        } else if (game.players[1] === player && game.secretNumber2) {\r\n            return res.status(400).json({ message: 'Secret number already set for player 2' });\r\n        } else {\r\n            return res.status(400).json({ message: 'Player is not part of this game' });\r\n        }\r\n\r\n        await game.save();\r\n        res.status(200).json({ message: 'Secret number set successfully!' });\r\n    } catch (err) {\r\n        console.error('Error setting secret number:', err);\r\n        res.status(500).json({ message: 'Error setting secret number' });\r\n    }\r\n};\r\n\r\n// Submit a guess and calculate n and p\r\nconst submitGuess = async (req, res) => {\r\n    try {\r\n        const { gameId, player, guess } = req.body;\r\n        const game = await Game.findOne({ gameId });\r\n        if (!game) {\r\n            return res.status(404).json({ message: 'Game not found' });\r\n        }\r\n\r\n        const currentPlayerTurn = game.status === 'player1Turn' ? game.players[0] : game.players[1];\r\n        if (player !== currentPlayerTurn) {\r\n            return res.status(400).json({ message: `It's not ${player}'s turn!` });\r\n        }\r\n\r\n        const { n, p } = calculateNandP(game.players[0] === player ? game.secretNumber1 : game.secretNumber2, guess);\r\n        game.guesses.push({ player, guess, n, p });\r\n\r\n        // Alternate player turn after each guess\r\n        game.status = currentPlayerTurn === game.players[0] ? 'player2Turn' : 'player1Turn';\r\n        await game.save();\r\n        res.status(200).json({ message: 'Guess submitted successfully!', n, p });\r\n    } catch (err) {\r\n        console.error('Error submitting guess:', err);\r\n        res.status(500).json({ message: 'Error submitting guess' });\r\n    }\r\n};\r\n\r\n// Fetch game data\r\nconst getGameData = async (req, res) => {\r\n    try {\r\n        const { gameId } = req.params;\r\n        const game = await Game.findOne({ gameId });\r\n        if (!game) {\r\n            return res.status(404).json({ message: 'Game not found' });\r\n        }\r\n        res.json(game);\r\n    } catch (err) {\r\n        console.error('Error fetching game data:', err);\r\n        res.status(500).json({ message: 'Error fetching game data' });\r\n    }\r\n};\r\n\r\n// Handle second player joining the game\r\nconst joinGame = async (req, res) => {\r\n    try {\r\n        const { gameId, player } = req.body;\r\n\r\n        const game = await Game.findOne({ gameId });\r\n        if (!game) {\r\n            return res.status(404).json({ message: 'Game not found' });\r\n        }\r\n\r\n        if (game.player2Joined) {\r\n            return res.status(400).json({ message: 'Game already has two players' });\r\n        }\r\n\r\n        // Set player2Joined to true for the second player\r\n        game.player2Joined = true;\r\n\r\n        // If player2 joins, set the game status to 'setSecret' for player1\r\n        game.status = 'setSecret';\r\n        await game.save();\r\n\r\n        res.status(200).json({ message: 'Player joined the game!' });\r\n    } catch (err) {\r\n        console.error('Error joining the game:', err);\r\n        res.status(500).json({ message: 'Error joining the game' });\r\n    }\r\n};\r\n\r\n// Update game data (added as a new feature to handle game state updates)\r\nconst updateGame = async (gameId, updatedData) => {\r\n    try {\r\n        const game = await Game.findOne({ gameId });\r\n        if (!game) {\r\n            throw new Error('Game not found');\r\n        }\r\n        Object.assign(game, updatedData);\r\n        await game.save();\r\n        return game;\r\n    } catch (err) {\r\n        throw new Error('Error updating the game');\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    startGame,\r\n    submitGuess,\r\n    setSecretNumber,\r\n    getGameData,\r\n    joinGame,\r\n    updateGame,\r\n    calculateNandP\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}