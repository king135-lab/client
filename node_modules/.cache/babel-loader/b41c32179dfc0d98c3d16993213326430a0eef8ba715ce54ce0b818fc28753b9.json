{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ademm\\\\Documents\\\\Projects\\\\number-position-game\\\\client\\\\src\\\\components\\\\TriviaChallenge.js\",\n  _s = $RefreshSig$();\n// src/components/TriviaChallenge.js\nimport React, { useState, useEffect } from 'react';\nimport './TriviaChallenge.css'; // Create your styles here\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst triviaQuestions = [{\n  question: \"Which planet is known as the Red Planet?\",\n  options: [\"Earth\", \"Mars\", \"Jupiter\", \"Venus\"],\n  answer: \"Mars\"\n}, {\n  question: \"What is the largest ocean on Earth?\",\n  options: [\"Atlantic\", \"Indian\", \"Arctic\", \"Pacific\"],\n  answer: \"Pacific\"\n}, {\n  question: \"Who wrote the play 'Romeo and Juliet'?\",\n  options: [\"Charles Dickens\", \"William Shakespeare\", \"Mark Twain\", \"Jane Austen\"],\n  answer: \"William Shakespeare\"\n}, {\n  question: \"What is the capital city of France?\",\n  options: [\"Paris\", \"Berlin\", \"Madrid\", \"Rome\"],\n  answer: \"Paris\"\n}\n// Add as many questions as you like.\n];\nconst TriviaChallenge = () => {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [feedback, setFeedback] = useState('');\n  const [selectedOption, setSelectedOption] = useState('');\n\n  // On mount, pick a random question\n  useEffect(() => {\n    loadRandomQuestion();\n  }, []);\n  const loadRandomQuestion = () => {\n    setFeedback('');\n    setSelectedOption('');\n    const randomIndex = Math.floor(Math.random() * triviaQuestions.length);\n    setCurrentQuestion(triviaQuestions[randomIndex]);\n  };\n  const handleOptionClick = option => {\n    setSelectedOption(option);\n    if (option === currentQuestion.answer) {\n      setFeedback(\"Correct!\");\n    } else {\n      setFeedback(`Wrong. The correct answer is ${currentQuestion.answer}.`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"trivia-container\",\n    children: currentQuestion ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"trivia-title\",\n        children: \"Trivia Challenge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"trivia-question\",\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"trivia-options\",\n        children: currentQuestion.options.map((option, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `trivia-option ${selectedOption === option ? 'selected' : ''}`,\n          onClick: () => handleOptionClick(option),\n          disabled: !!feedback // disable options after one is selected\n          ,\n          children: option\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this), feedback && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"trivia-feedback\",\n        children: feedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"trivia-next-btn\",\n        onClick: loadRandomQuestion,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading challenge...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n_s(TriviaChallenge, \"bPPaIdg2Uvl2JgoLw/8AXAQ9BU8=\");\n_c = TriviaChallenge;\nexport default TriviaChallenge;\nvar _c;\n$RefreshReg$(_c, \"TriviaChallenge\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","triviaQuestions","question","options","answer","TriviaChallenge","_s","currentQuestion","setCurrentQuestion","feedback","setFeedback","selectedOption","setSelectedOption","loadRandomQuestion","randomIndex","Math","floor","random","length","handleOptionClick","option","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","idx","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ademm/Documents/Projects/number-position-game/client/src/components/TriviaChallenge.js"],"sourcesContent":["// src/components/TriviaChallenge.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport './TriviaChallenge.css'; // Create your styles here\r\n\r\nconst triviaQuestions = [\r\n    {\r\n        question: \"Which planet is known as the Red Planet?\",\r\n        options: [\"Earth\", \"Mars\", \"Jupiter\", \"Venus\"],\r\n        answer: \"Mars\"\r\n    },\r\n    {\r\n        question: \"What is the largest ocean on Earth?\",\r\n        options: [\"Atlantic\", \"Indian\", \"Arctic\", \"Pacific\"],\r\n        answer: \"Pacific\"\r\n    },\r\n    {\r\n        question: \"Who wrote the play 'Romeo and Juliet'?\",\r\n        options: [\"Charles Dickens\", \"William Shakespeare\", \"Mark Twain\", \"Jane Austen\"],\r\n        answer: \"William Shakespeare\"\r\n    },\r\n    {\r\n        question: \"What is the capital city of France?\",\r\n        options: [\"Paris\", \"Berlin\", \"Madrid\", \"Rome\"],\r\n        answer: \"Paris\"\r\n    },\r\n    // Add as many questions as you like.\r\n];\r\n\r\nconst TriviaChallenge = () => {\r\n    const [currentQuestion, setCurrentQuestion] = useState(null);\r\n    const [feedback, setFeedback] = useState('');\r\n    const [selectedOption, setSelectedOption] = useState('');\r\n\r\n    // On mount, pick a random question\r\n    useEffect(() => {\r\n        loadRandomQuestion();\r\n    }, []);\r\n\r\n    const loadRandomQuestion = () => {\r\n        setFeedback('');\r\n        setSelectedOption('');\r\n        const randomIndex = Math.floor(Math.random() * triviaQuestions.length);\r\n        setCurrentQuestion(triviaQuestions[randomIndex]);\r\n    };\r\n\r\n    const handleOptionClick = (option) => {\r\n        setSelectedOption(option);\r\n        if (option === currentQuestion.answer) {\r\n            setFeedback(\"Correct!\");\r\n        } else {\r\n            setFeedback(`Wrong. The correct answer is ${currentQuestion.answer}.`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"trivia-container\">\r\n            {currentQuestion ? (\r\n                <>\r\n                    <h3 className=\"trivia-title\">Trivia Challenge</h3>\r\n                    <p className=\"trivia-question\">{currentQuestion.question}</p>\r\n                    <div className=\"trivia-options\">\r\n                        {currentQuestion.options.map((option, idx) => (\r\n                            <button\r\n                                key={idx}\r\n                                className={`trivia-option ${selectedOption === option ? 'selected' : ''}`}\r\n                                onClick={() => handleOptionClick(option)}\r\n                                disabled={!!feedback}  // disable options after one is selected\r\n                            >\r\n                                {option}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                    {feedback && <p className=\"trivia-feedback\">{feedback}</p>}\r\n                    <button className=\"trivia-next-btn\" onClick={loadRandomQuestion}>\r\n                        Next Question\r\n                    </button>\r\n                </>\r\n            ) : (\r\n                <p>Loading challenge...</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TriviaChallenge;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}